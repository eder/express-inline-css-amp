{"version":3,"sources":["../src/index.js"],"names":["NODE_ENV","process","env","InlineCSSAMP","constructor","CSSPathBase","CSSFilePath","CSSMinify","outFile","version","CSSOutDefault","pathToReadCSS","generateCSS","view","response","fs","existsSync","outFileTemp","CSSFilePathTemp","Promise","resolve","reject","options","file","outputStyle","sass","render","err","result","console","error","writeFile","css","readCSS","viewFile","log","readFile","run","tagStyle","html","content","er","test","replace","module","exports","object","inlinecss","req","res","next","renderCallback","then","send","Render","renders","callback"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport sass from 'node-sass';\n\nconst NODE_ENV = process.env.NODE_ENV;\n\nexport class InlineCSSAMP {\n  constructor({\n    CSSPathBase = '/tmp/',\n    CSSFilePath,\n    CSSMinify = true,\n    outFile,\n    version,\n  }) {\n    this.CSSOutDefault = `/tmp/generate-by-express-inline-css-amp-${version}.css`;\n    this.CSSFilePath = CSSFilePath;\n    this.CSSMinify = CSSMinify;\n    this.CSSPathBase = CSSPathBase;\n    this.outFile = outFile || this.CSSOutDefault\n    this.version = version;\n    this.pathToReadCSS =  this.outFile;\n  }\n\n  async generateCSS(view) {\n    this.pathToReadCSS = `${this.CSSPathBase}${view}.scss`;\n    const response = fs.existsSync(`${this.CSSPathBase}${view}.scss`)\n    if (response) {\n      this.outFileTemp = `/tmp/generate-by-express-inline-css-amp-${this.version}-${view}.scss`;\n      this.CSSFilePathTemp = this.pathToReadCSS;\n    } else {\n      this.CSSFilePathTemp = this.CSSFilePath;\n      this.pathToReadCSS = this.outFile;\n      this.outFileTemp  = this.outFile;\n    }\n\n\n    return new Promise((resolve, reject) => {\n      let options = {\n        file: this.CSSFilePathTemp,\n        outFile: this.outFileTemp,\n        outputStyle: this.CSSMinify ? 'compressed' : '',\n      }\n      \n      if (NODE_ENV != 'development') {\n        if (fs.existsSync(this.outFileTemp) && fs.existsSync(this.CSSOutDefault)) {\n\n          return  resolve();\n        } else {\n          if(!fs.existsSync(this.CSSFilePathTemp) && fs.existsSync(this.CSSOutDefault)) {\n            return  resolve();\n          }\n        }\n      }\n\n      try {\n        sass.render(options, (err, result) => {\n          if(err) {\n            console.error(err);\n            return reject(err);\n          }\n\n          fs.writeFile(this.outFileTemp, result.css, function(err){\n          });\n        });\n      }\n      catch(err) {\n        throw err\n      }\n      resolve();\n    })\n  }\n  \n  readCSS(view) {\n    const viewFile = `/tmp/generate-by-express-inline-css-amp-${this.version}-${view}.scss`;\n    const file = fs.existsSync(viewFile) ? viewFile : this.CSSOutDefault;\n    console.log('IM HERE!!! => ', file);\n\n    return new Promise((resolve, reject) => {\n      try {\n        fs.readFile(file, 'utf8', (err, file) => {\n          return resolve(file)\n        })\n      }\n      catch(err) {\n        throw err\n      }\n    })\n  }\n  async run (view) {\n    await this.generateCSS(view);\n    return this.readCSS(view);\n  }\n  \n  tagStyle(html, content) {\n    const er = /(<\\/head>)/i;\n    if (!er.test(html)) return html;\n    return html.replace(er, `<style amp-custom>${content}</style>$1`);\n  }\n}\n\nmodule.exports = object => {\n  const inlinecss = new InlineCSSAMP(object);\n  const render = (req, res, next) => {\n    const renderCallback = function(view)  {\n     \n      return function (err, html) {\n        inlinecss.run(view).then(content => {\n          res.send(inlinecss.tagStyle(html,content));\n        })\n      }\n    }\n\n    res.Render = res.render\n    res.render = function (view, renders, callback) {\n      this.Render(view, renders, renderCallback(view))\n    }\n\n    return next()\n  }\n  return render;\n}\n\n"],"file":"index.js"}