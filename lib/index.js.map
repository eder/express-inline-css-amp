{"version":3,"sources":["../src/index.js"],"names":["NODE_ENV","process","env","InlineCSSAMP","constructor","CSSPathBase","CSSFilePath","CSSMinify","outFile","version","pathToReadCSS","verify","generateCSS","view","response","readCSS","Promise","resolve","reject","options","file","outputStyle","sass","render","err","result","console","error","fs","writeFile","css","readFile","run","existsSync","tagStyle","html","content","er","test","replace","module","exports","object","inlinecss","req","res","next","renderCallback","then","send","Render","renders","callback"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport sass from 'node-sass';\n\nconst NODE_ENV = process.env.NODE_ENV;\n\nexport class InlineCSSAMP {\n  constructor({\n    CSSPathBase,\n    CSSFilePath,\n    CSSMinify = true,\n    outFile,\n    version,\n  }) {\n    this.CSSFilePath = CSSFilePath;\n    this.CSSMinify = CSSMinify;\n    this.CSSPathBase = CSSPathBase;\n    this.outFile = outFile || `/tmp/generate-by-express-inline-css-amp-${version}.css`;\n    this.version = version;\n    this.pathToReadCSS =  this.outFile;\n  }\n\n  verify() {\n    if (!this.CSSFilePath) {\n      throw \"You need add a file in CSSFilePath param\";\n   }\n  }\n\n  async generateCSS(view) {\n    this.pathToReadCSS =  `${this.CSSPathBase}${view}.scss`;\n    const response = await this.readCSS(view);\n    if (response) {\n      this.outFile = `/tmp/generate-by-express-inline-css-amp-${this.version}-${view}.scss`;\n      this.CSSFilePath =  `${this.CSSPathBase}${view}.scss`;\n    } else {\n      this.pathToReadCSS = this.outFile;\n    }\n    \n    return new Promise((resolve, reject) => {\n        let options = {\n          file: this.CSSFilePath,\n          outFile: this.outFile,\n          outputStyle: this.CSSMinify ? 'compressed' : '',\n        }\n        try {\n          sass.render(options, (err, result) => {\n            if(err) {\n              console.error(err);\n              return reject(err);\n            }\n            fs.writeFile(this.outFile, result.css, function(err){\n            });\n          });\n        }\n        catch(err) {\n          throw err\n        }\n        resolve();\n    })\n  }\n  \n  readCSS() {\n    return new Promise((resolve, reject) => {\n      try {\n        fs.readFile(this.pathToReadCSS, 'utf8', (err, file) => {\n          return resolve(file)\n        })\n      }\n      catch(err) {\n        throw err\n      }\n    })\n  }\n  \n  async run (view) {\n    if (NODE_ENV && NODE_ENV != 'development' && fs.existsSync(this.pathToReadCSS)) {\n      return this.readCSS();\n    }\n    await this.generateCSS(view);\n    return this.readCSS();\n\n  }\n\n  tagStyle(html, content) {\n    const er = /(<\\/head>)/i;\n    if (!er.test(html)) return html;\n    return html.replace(er, `<style amp-custom>${content}</style>$1`);\n  }\n}\n\nmodule.exports = object => {\n  const inlinecss = new InlineCSSAMP(object);\n  const render = (req, res, next) => {\n    const renderCallback = function(view)  {\n     \n      return function (err, html) {\n        inlinecss.run(view).then(content => {\n          res.send(inlinecss.tagStyle(html,content));\n        })\n      }\n    }\n\n    res.Render = res.render\n    res.render = function (view, renders, callback) {\n      this.Render(view, renders, renderCallback(view))\n    }\n\n    return next()\n  }\n\n  return render;\n\n}\n\n"],"file":"index.js"}